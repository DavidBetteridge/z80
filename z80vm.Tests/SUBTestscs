using Xunit;
using static z80vm.op8;

namespace z80vm.Tests
{
    public class SubTests : TestBase
    {
        [Theory]
        [InlineData(101, 100, 1)]
        [InlineData(200, 100, 100)]
        public void Subtracting_A_Value_From_A_Should_Place_The_Result_In_A(byte valueInA, byte valueToSubtract, byte expectedValue)
        {
            var machine = CreateMachine();
            machine.Registers.Set(Reg8.A, valueInA);
            machine.SUB(Reg8.A, Read8BitValue(valueToSubtract));

            Assert.Equal(expectedValue, machine.Registers.Read(Reg8.A));
        }

        [Fact]
        public void The_N_Flag_Should_Be_Set()
        {
            var machine = CreateMachine();
            machine.SUB(Reg8.A, Read8BitValue(1));

            Assert.Equal(true, machine.Flags.Read(Flag.N));
        }

        [Fact]
        public void Subing_2_8Bit_Values_Should_Call_The_Flag_Evaluator_And_Set_All_The_Flags()
        {
            var machine = CreateMachine();

            var callCount = 0;
            var fe = new Moq.Mock<IFlagsEvaluator>();
            fe.Setup(f => f.Evalulate(machine.Flags, 0, -2)).Callback(() =>
            {
                machine.Flags.Set(Flag.C);
                machine.Flags.Set(Flag.PV);
                machine.Flags.Set(Flag.S);
                machine.Flags.Set(Flag.Z);
                callCount++;
            });
            machine.SetFlagsEvaluator(fe.Object);

            machine.SUB(Reg8.A, Read8BitValue(2));

            Assert.True(machine.Flags.Read(Flag.C));
            Assert.True(machine.Flags.Read(Flag.PV));
            Assert.True(machine.Flags.Read(Flag.S));
            Assert.True(machine.Flags.Read(Flag.Z));
            Assert.Equal(1, callCount);
        }

    }
}
