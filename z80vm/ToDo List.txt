Completed Commands
------------------
POP
PUSH
RET
JR
JD
DJNZ
EX
EXX
LDD
LDDR
LDI
DIR
NOP (that was tricky)

Part Completed Commands
------------------
ADD - needs to set flags for 16 bit operations
ADC - needs to set flags for 16 bit operations
DEC - needs to set flags
INC - needs to set flags and support 16 bit operations
NEG - needs to set flags
LD - Support for flag P/V flag,  Restrictions
SUB - Started
DAA - Started

Parser
------
Support Labels
RST commands

Issues
------
Use var operand = new Moq.Mock<Iop8>(); in existing tests
Remove label code from machine,  this is a feature of the assembler, not the machine

Bigger Bits
-----------
Memory Visualisation
Front End
Runner 
Debugger
Interupts





          Type remoteType = 
              assembly.GetType("ThirdPartyDll.ThirdPartyClass");
            
            // Load the enum type
            PropertyInfo flagsInfo = 
              remoteType.GetProperty("ThirdPartyBitFields");
            Type enumType = assembly.GetType("ThirdPartyDll.BitFields");

            // Load the enum values
            FieldInfo enumItem1 = enumType.GetField("AnotherSetting");
            FieldInfo enumItem2 = enumType.GetField("SomethingElse");

            // Calculate the new value
            int enumValue1 = (int)enumItem1.GetValue(enumType);
            int enumValue2 = (int)enumItem2.GetValue(enumType);
            int currentValue = (int)flagsInfo.GetValue(remoteObject, null);
            int newValue = currentValue | enumValue1 | enumValue2;
            
            // Store the new value back in Options.FieldFlags
            object newEnumValue = Enum.ToObject(enumType, newValue);
            flagsInfo.SetValue(remoteObject, newEnumValue, null);

            // Call the method
            MethodInfo method = remoteType.GetMethod("DoSomeGood");
            method.Invoke(remoteObject, null);
